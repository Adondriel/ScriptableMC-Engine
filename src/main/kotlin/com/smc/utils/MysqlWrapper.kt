package com.smc.utils

import com.pixlfox.scriptablemc.ScriptablePluginMain
import org.bukkit.Bukkit
import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement
import java.sql.Statement

@Suppress("unused", "MemberVisibilityCanBePrivate")
class MysqlWrapper(private val host: String, private val port: Int, private val database: String, private val username: String, private val password: String) {
    private var connection: Connection? = null

    fun openConnection() {
        synchronized (this) {
            if (connection != null && !connection!!.isClosed) {
                return;
            }

            Class.forName("com.mysql.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mysql://" + this.host + ":" + this.port + "/" + this.database, this.username, this.password);
        }
    }

    fun openConnectionAsync(callback: (() -> Unit)? = null) = executeAsync {
        this.openConnection()

        if(callback != null) {
            callback()
        }
    }

    fun executeAsync(asyncFunction: (() -> Unit)) = Bukkit.getScheduler().runTaskAsynchronously(ScriptablePluginMain.instance, Runnable {
        asyncFunction()
    });

    fun getBaseConnection(): Connection? = connection

    fun close() = connection?.close()
    fun isClosed() = connection?.isClosed != false
    fun isReadOnly(): Boolean = connection?.isReadOnly == true

    fun createStatement(): Statement? = connection?.createStatement()
    fun createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement? = connection?.createStatement(resultSetType, resultSetConcurrency)
    fun createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement? = connection?.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability)

    fun prepareStatement(sql: String): PreparedStatement? = connection?.prepareStatement(sql)
    fun prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement? = connection?.prepareStatement(sql, autoGeneratedKeys)
    fun prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement? = connection?.prepareStatement(sql, resultSetType, resultSetConcurrency)
    fun prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement? = connection?.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability)
    fun prepareStatement(sql: String, columnIndexes: IntArray): PreparedStatement? = connection?.prepareStatement(sql, columnIndexes)
}